-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.categorias
(
    id_categoria serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT categorias_pkey PRIMARY KEY (id_categoria)
);

CREATE TABLE IF NOT EXISTS public.ciudades
(
    id_ciudad serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ciudades_pkey PRIMARY KEY (id_ciudad)
);

CREATE TABLE IF NOT EXISTS public.clientes
(
    id_cliente serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ci character varying(10) COLLATE pg_catalog."default" NOT NULL,
    direccion text COLLATE pg_catalog."default",
    telefono character varying(15) COLLATE pg_catalog."default",
    id_ciudad integer,
    CONSTRAINT clientes_pkey PRIMARY KEY (id_cliente),
    CONSTRAINT clientes_ci_key UNIQUE (ci)
);

CREATE TABLE IF NOT EXISTS public.compras
(
    id serial NOT NULL,
    id_proeedor integer NOT NULL,
    fecha date DEFAULT CURRENT_DATE,
    estado character varying(50) COLLATE pg_catalog."default" DEFAULT 'pendiente'::character varying,
    total integer DEFAULT 0,
    CONSTRAINT compras_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detalle_orden
(
    id_detalle serial NOT NULL,
    id_orden integer,
    id_producto integer,
    cantidad integer NOT NULL,
    precio integer NOT NULL,
    CONSTRAINT detalle_orden_pkey PRIMARY KEY (id_detalle)
);

CREATE TABLE IF NOT EXISTS public.detallecompras
(
    id serial NOT NULL,
    idcompra integer NOT NULL,
    cantidad integer NOT NULL,
    precio integer NOT NULL,
    CONSTRAINT detallecompras_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detalleventas
(
    id serial NOT NULL,
    idventa integer NOT NULL,
    cantidad integer NOT NULL,
    precio integer NOT NULL,
    id_producto integer NOT NULL,
    CONSTRAINT detalleventas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.envios
(
    id_envio serial NOT NULL,
    id_orden integer,
    direccion_envio text COLLATE pg_catalog."default",
    fecha date DEFAULT CURRENT_DATE,
    estado character varying(50) COLLATE pg_catalog."default" DEFAULT 'Pendiente'::character varying,
    id_ciudad integer,
    CONSTRAINT envios_pkey PRIMARY KEY (id_envio)
);

CREATE TABLE IF NOT EXISTS public.inventario
(
    id_movimiento serial NOT NULL,
    id_producto integer,
    tipo_movimiento character varying(50) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    fecha date DEFAULT CURRENT_DATE,
    CONSTRAINT inventario_pkey PRIMARY KEY (id_movimiento)
);

CREATE TABLE IF NOT EXISTS public.marcas
(
    id_marca serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT marcas_pkey PRIMARY KEY (id_marca)
);

CREATE TABLE IF NOT EXISTS public.metodos_pago
(
    id_metodo_pago serial NOT NULL,
    metodo character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT metodos_pago_pkey PRIMARY KEY (id_metodo_pago)
);

CREATE TABLE IF NOT EXISTS public.ordenes
(
    id_orden serial NOT NULL,
    id_cliente integer,
    fecha date DEFAULT CURRENT_DATE,
    total integer NOT NULL,
    CONSTRAINT ordenes_pkey PRIMARY KEY (id_orden)
);

CREATE TABLE IF NOT EXISTS public.pagos
(
    id_pago serial NOT NULL,
    id_orden integer,
    id_metodo_pago integer,
    fecha date DEFAULT CURRENT_DATE,
    monto integer NOT NULL,
    CONSTRAINT pagos_pkey PRIMARY KEY (id_pago)
);

CREATE TABLE IF NOT EXISTS public.productos
(
    id_producto serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    precio integer NOT NULL,
    cantidad integer NOT NULL,
    id_categoria integer,
    id_marca integer,
    CONSTRAINT productos_pkey PRIMARY KEY (id_producto)
);

CREATE TABLE IF NOT EXISTS public.proveedores
(
    id_proveedor serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ruc character varying(15) COLLATE pg_catalog."default",
    telefono character varying(15) COLLATE pg_catalog."default",
    correo character varying(100) COLLATE pg_catalog."default",
    id_ciudad integer,
    CONSTRAINT proveedores_pkey PRIMARY KEY (id_proveedor)
);

CREATE TABLE IF NOT EXISTS public.usuarios
(
    id_usuario serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    correo character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contrasena character varying(100) COLLATE pg_catalog."default" NOT NULL,
    tipo character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT usuarios_pkey PRIMARY KEY (id_usuario),
    CONSTRAINT usuarios_correo_key UNIQUE (correo)
);

CREATE TABLE IF NOT EXISTS public.ventas
(
    id serial NOT NULL,
    id_cliente integer NOT NULL,
    fecha date NOT NULL,
    estado character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'pendiente'::character varying,
    total integer NOT NULL DEFAULT 0,
    CONSTRAINT ventas_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.clientes
    ADD CONSTRAINT clientes_id_ciudad_fkey FOREIGN KEY (id_ciudad)
    REFERENCES public.ciudades (id_ciudad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.detalle_orden
    ADD CONSTRAINT detalle_orden_id_orden_fkey FOREIGN KEY (id_orden)
    REFERENCES public.ordenes (id_orden) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.detalle_orden
    ADD CONSTRAINT detalle_orden_id_producto_fkey FOREIGN KEY (id_producto)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.detallecompras
    ADD CONSTRAINT idcompra FOREIGN KEY (idcompra)
    REFERENCES public.compras (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detalleventas
    ADD CONSTRAINT id_producto FOREIGN KEY (id_producto)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detalleventas
    ADD CONSTRAINT idventa FOREIGN KEY (idventa)
    REFERENCES public.ventas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.envios
    ADD CONSTRAINT envios_id_ciudad_fkey FOREIGN KEY (id_ciudad)
    REFERENCES public.ciudades (id_ciudad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.envios
    ADD CONSTRAINT envios_id_orden_fkey FOREIGN KEY (id_orden)
    REFERENCES public.ordenes (id_orden) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventario
    ADD CONSTRAINT inventario_id_producto_fkey FOREIGN KEY (id_producto)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_id_metodo_pago_fkey FOREIGN KEY (id_metodo_pago)
    REFERENCES public.metodos_pago (id_metodo_pago) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_id_orden_fkey FOREIGN KEY (id_orden)
    REFERENCES public.ordenes (id_orden) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.productos
    ADD CONSTRAINT productos_id_categoria_fkey FOREIGN KEY (id_categoria)
    REFERENCES public.categorias (id_categoria) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.proveedores
    ADD CONSTRAINT proveedores_id_ciudad_fkey FOREIGN KEY (id_ciudad)
    REFERENCES public.ciudades (id_ciudad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ventas
    ADD CONSTRAINT id_cliente FOREIGN KEY (id_cliente)
    REFERENCES public.clientes (id_cliente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
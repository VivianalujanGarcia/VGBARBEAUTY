-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Banco"
(
    id serial NOT NULL,
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Banco_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.abrircaja
(
    id serial NOT NULL,
    fecha date NOT NULL,
    monto integer NOT NULL,
    estado character varying COLLATE pg_catalog."default",
    idusuario integer NOT NULL,
    CONSTRAINT abrircaja_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ajusteinventario
(
    id serial NOT NULL,
    fecha date NOT NULL,
    tipo character varying COLLATE pg_catalog."default" NOT NULL,
    estado character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDIENTE'::character varying,
    idusuarios integer NOT NULL,
    CONSTRAINT ajusteinventario_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.categorias
(
    id_categoria serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT categorias_pkey PRIMARY KEY (id_categoria)
);

CREATE TABLE IF NOT EXISTS public.cerrarcaja
(
    id serial NOT NULL,
    fecha date NOT NULL DEFAULT CURRENT_DATE,
    monto integer NOT NULL,
    estado character varying COLLATE pg_catalog."default" NOT NULL,
    idabrircaja integer,
    CONSTRAINT cerrarcaja_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ciudades
(
    id_ciudad serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ciudades_pkey PRIMARY KEY (id_ciudad)
);

CREATE TABLE IF NOT EXISTS public.clientes
(
    id_cliente serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ci character varying(10) COLLATE pg_catalog."default" NOT NULL,
    direccion text COLLATE pg_catalog."default",
    telefono character varying(15) COLLATE pg_catalog."default",
    id_ciudad integer,
    CONSTRAINT clientes_pkey PRIMARY KEY (id_cliente),
    CONSTRAINT clientes_ci_key UNIQUE (ci)
);

CREATE TABLE IF NOT EXISTS public.cobros
(
    id serial NOT NULL,
    fecha date NOT NULL,
    estado character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDIENTE'::character varying,
    idclientes integer NOT NULL,
    idabrircaja integer NOT NULL,
    numero serial NOT NULL,
    CONSTRAINT cobros_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.compras
(
    id serial NOT NULL,
    id_proveedor integer NOT NULL,
    fecha date NOT NULL DEFAULT CURRENT_DATE,
    estado character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pendiente'::character varying,
    total integer NOT NULL DEFAULT 0,
    numero integer,
    condicion character varying COLLATE pg_catalog."default",
    CONSTRAINT compras_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cuentasclientes
(
    id serial NOT NULL,
    monto integer NOT NULL,
    cuota integer NOT NULL,
    nrocuota integer NOT NULL,
    parcial integer NOT NULL DEFAULT 0,
    vencimiento character varying COLLATE pg_catalog."default" NOT NULL,
    estado character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDIENTE'::character varying,
    idventas integer NOT NULL,
    CONSTRAINT cuentasclientes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cuentasproveedores
(
    id serial NOT NULL,
    monto integer NOT NULL,
    cuota integer NOT NULL,
    nrocuota integer NOT NULL,
    parcial integer DEFAULT 0,
    vencimiento character varying(255) COLLATE pg_catalog."default" NOT NULL,
    estado character varying(255) COLLATE pg_catalog."default" DEFAULT 'PENDIENTE'::character varying,
    idcompras integer NOT NULL,
    CONSTRAINT cuentasproveedores_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detalleajuste
(
    id serial NOT NULL,
    idajusteinve integer NOT NULL,
    idproductos integer NOT NULL,
    motivo character varying COLLATE pg_catalog."default" NOT NULL,
    cant_ajuste integer NOT NULL,
    CONSTRAINT detalleajuste_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detallecobros
(
    iddetallecobros serial NOT NULL,
    idcobros integer NOT NULL,
    idcuentaclientes integer NOT NULL,
    CONSTRAINT detallecobros_pkey PRIMARY KEY (iddetallecobros)
);

CREATE TABLE IF NOT EXISTS public.detallecompras
(
    id serial NOT NULL,
    idcompra integer NOT NULL,
    cantidad integer NOT NULL,
    precio integer NOT NULL,
    id_producto integer NOT NULL,
    CONSTRAINT detallecompras_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detallepagos
(
    iddetallepagos serial NOT NULL,
    idpagos integer NOT NULL,
    idcuentaproveedores integer NOT NULL,
    CONSTRAINT detallepagos_pkey PRIMARY KEY (iddetallepagos)
);

CREATE TABLE IF NOT EXISTS public.detalleventas
(
    id serial NOT NULL,
    idventa integer NOT NULL,
    cantidad integer NOT NULL,
    precio integer NOT NULL,
    id_producto integer NOT NULL,
    CONSTRAINT detalleventas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.inventario
(
    id_movimiento serial NOT NULL,
    id_producto integer,
    tipo_movimiento character varying(50) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    fecha date DEFAULT CURRENT_DATE,
    CONSTRAINT inventario_pkey PRIMARY KEY (id_movimiento)
);

CREATE TABLE IF NOT EXISTS public.marcas
(
    id_marca serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT marcas_pkey PRIMARY KEY (id_marca)
);

CREATE TABLE IF NOT EXISTS public.metodos_pago
(
    id_metodo_pago serial NOT NULL,
    metodo character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT metodos_pago_pkey PRIMARY KEY (id_metodo_pago)
);

CREATE TABLE IF NOT EXISTS public.metodos_pago_bancos
(
    id_metodo_pago integer NOT NULL,
    id_banco integer NOT NULL,
    CONSTRAINT metodos_pago_bancos_pkey PRIMARY KEY (id_metodo_pago, id_banco)
);

CREATE TABLE IF NOT EXISTS public.movimientos_caja
(
    id serial NOT NULL,
    fecha timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    tipo character varying(50) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    monto numeric(10, 2) NOT NULL,
    idabrircaja integer,
    CONSTRAINT movimientos_caja_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.pagos
(
    id serial NOT NULL,
    fecha date NOT NULL,
    estado character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDIENTE'::character varying,
    idproveedores integer NOT NULL,
    idabrircaja integer NOT NULL,
    numero integer NOT NULL,
    CONSTRAINT pagos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.personales
(
    id_personal serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    apellido character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ci character varying(20) COLLATE pg_catalog."default" NOT NULL,
    fecha_nacimiento date NOT NULL,
    direccion character varying(100) COLLATE pg_catalog."default" NOT NULL,
    telefono character varying(20) COLLATE pg_catalog."default" NOT NULL,
    idciudad integer NOT NULL,
    CONSTRAINT personales_pkey PRIMARY KEY (id_personal),
    CONSTRAINT personales_ci_key UNIQUE (ci)
);

CREATE TABLE IF NOT EXISTS public.productos
(
    id_producto serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    precio integer NOT NULL,
    cantidad integer NOT NULL,
    id_categoria integer,
    id_marca integer,
    iva integer,
    CONSTRAINT productos_pkey PRIMARY KEY (id_producto)
);

CREATE TABLE IF NOT EXISTS public.proveedores
(
    id_proveedor serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ruc character varying(15) COLLATE pg_catalog."default",
    telefono character varying(15) COLLATE pg_catalog."default",
    correo character varying(100) COLLATE pg_catalog."default",
    id_ciudad integer,
    CONSTRAINT proveedores_pkey PRIMARY KEY (id_proveedor)
);

CREATE TABLE IF NOT EXISTS public.usuarios
(
    id serial NOT NULL,
    datos character varying(100) COLLATE pg_catalog."default" NOT NULL,
    usuario character varying(100) COLLATE pg_catalog."default" NOT NULL,
    clave character varying(50) COLLATE pg_catalog."default" NOT NULL,
    rol character varying(20) COLLATE pg_catalog."default" NOT NULL,
    estado character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'A'::bpchar,
    CONSTRAINT usuarios_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ventas
(
    id serial NOT NULL,
    id_cliente integer NOT NULL,
    fecha date NOT NULL,
    estado character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'pendiente'::character varying,
    total integer NOT NULL DEFAULT 0,
    numero serial NOT NULL,
    condicion character varying COLLATE pg_catalog."default",
    CONSTRAINT ventas_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.abrircaja
    ADD CONSTRAINT idusuario FOREIGN KEY (idusuario)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ajusteinventario
    ADD CONSTRAINT idusuarios FOREIGN KEY (idusuarios)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cerrarcaja
    ADD CONSTRAINT idabrircaja FOREIGN KEY (idabrircaja)
    REFERENCES public.abrircaja (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.clientes
    ADD CONSTRAINT clientes_id_ciudad_fkey FOREIGN KEY (id_ciudad)
    REFERENCES public.ciudades (id_ciudad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cobros
    ADD CONSTRAINT idabrircaja FOREIGN KEY (idabrircaja)
    REFERENCES public.abrircaja (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cobros
    ADD CONSTRAINT idclientes FOREIGN KEY (idclientes)
    REFERENCES public.clientes (id_cliente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cuentasclientes
    ADD CONSTRAINT idventas FOREIGN KEY (idventas)
    REFERENCES public.ventas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cuentasproveedores
    ADD CONSTRAINT cuentasproveedores_idcompras_fkey FOREIGN KEY (idcompras)
    REFERENCES public.compras (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.detalleajuste
    ADD CONSTRAINT idajusteinve FOREIGN KEY (idajusteinve)
    REFERENCES public.ajusteinventario (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detalleajuste
    ADD CONSTRAINT idproductos FOREIGN KEY (idproductos)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detallecobros
    ADD CONSTRAINT idcobros FOREIGN KEY (idcobros)
    REFERENCES public.cobros (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detallecobros
    ADD CONSTRAINT idcuentaclientes FOREIGN KEY (idcuentaclientes)
    REFERENCES public.cuentasclientes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detallecompras
    ADD CONSTRAINT id_producto FOREIGN KEY (id_producto)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detallecompras
    ADD CONSTRAINT idcompra FOREIGN KEY (idcompra)
    REFERENCES public.compras (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detallepagos
    ADD CONSTRAINT detallepagos_idcuentaproveedores_fkey FOREIGN KEY (idcuentaproveedores)
    REFERENCES public.cuentasproveedores (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.detallepagos
    ADD CONSTRAINT detallepagos_idpagos_fkey FOREIGN KEY (idpagos)
    REFERENCES public.pagos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.detalleventas
    ADD CONSTRAINT id_producto FOREIGN KEY (id_producto)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.detalleventas
    ADD CONSTRAINT idventa FOREIGN KEY (idventa)
    REFERENCES public.ventas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.inventario
    ADD CONSTRAINT inventario_id_producto_fkey FOREIGN KEY (id_producto)
    REFERENCES public.productos (id_producto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.metodos_pago_bancos
    ADD CONSTRAINT fk_banco FOREIGN KEY (id_banco)
    REFERENCES public."Banco" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.metodos_pago_bancos
    ADD CONSTRAINT fk_metodos_pago FOREIGN KEY (id_metodo_pago)
    REFERENCES public.metodos_pago (id_metodo_pago) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.movimientos_caja
    ADD CONSTRAINT movimientos_caja_idabrircaja_fkey FOREIGN KEY (idabrircaja)
    REFERENCES public.abrircaja (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_idabrircaja_fkey FOREIGN KEY (idabrircaja)
    REFERENCES public.abrircaja (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pagos
    ADD CONSTRAINT pagos_idproveedores_fkey FOREIGN KEY (idproveedores)
    REFERENCES public.proveedores (id_proveedor) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.personales
    ADD CONSTRAINT personales_idciudad_fkey FOREIGN KEY (idciudad)
    REFERENCES public.ciudades (id_ciudad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.productos
    ADD CONSTRAINT productos_id_categoria_fkey FOREIGN KEY (id_categoria)
    REFERENCES public.categorias (id_categoria) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.proveedores
    ADD CONSTRAINT proveedores_id_ciudad_fkey FOREIGN KEY (id_ciudad)
    REFERENCES public.ciudades (id_ciudad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ventas
    ADD CONSTRAINT id_cliente FOREIGN KEY (id_cliente)
    REFERENCES public.clientes (id_cliente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;